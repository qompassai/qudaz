//qompassai/qudaz/src/curand.zig
// ----------------------------------------
// Copyright (C) 2025 Qompass AI, All rights reserved
pub const CURAND_STATUS_SUCCESS: c_int = 0;
pub const CURAND_STATUS_VERSION_MISMATCH: c_int = 100;
pub const CURAND_STATUS_NOT_INITIALIZED: c_int = 101;
pub const CURAND_STATUS_ALLOCATION_FAILED: c_int = 102;
pub const CURAND_STATUS_TYPE_ERROR: c_int = 103;
pub const CURAND_STATUS_OUT_OF_RANGE: c_int = 104;
pub const CURAND_STATUS_LENGTH_NOT_MULTIPLE: c_int = 105;
pub const CURAND_STATUS_DOUBLE_PRECISION_REQUIRED: c_int = 106;
pub const CURAND_STATUS_LAUNCH_FAILURE: c_int = 201;
pub const CURAND_STATUS_PREEXISTING_FAILURE: c_int = 202;
pub const CURAND_STATUS_INITIALIZATION_FAILED: c_int = 203;
pub const CURAND_STATUS_ARCH_MISMATCH: c_int = 204;
pub const CURAND_STATUS_INTERNAL_ERROR: c_int = 999;
pub const enum_curandStatus = c_uint;
pub const curandStatus_t = enum_curandStatus;
pub const CURAND_RNG_TEST: c_int = 0;
pub const CURAND_RNG_PSEUDO_DEFAULT: c_int = 100;
pub const CURAND_RNG_PSEUDO_XORWOW: c_int = 101;
pub const CURAND_RNG_PSEUDO_MRG32K3A: c_int = 121;
pub const CURAND_RNG_PSEUDO_MTGP32: c_int = 141;
pub const CURAND_RNG_PSEUDO_MT19937: c_int = 142;
pub const CURAND_RNG_PSEUDO_PHILOX4_32_10: c_int = 161;
pub const CURAND_RNG_QUASI_DEFAULT: c_int = 200;
pub const CURAND_RNG_QUASI_SOBOL32: c_int = 201;
pub const CURAND_RNG_QUASI_SCRAMBLED_SOBOL32: c_int = 202;
pub const CURAND_RNG_QUASI_SOBOL64: c_int = 203;
pub const CURAND_RNG_QUASI_SCRAMBLED_SOBOL64: c_int = 204;
pub const enum_curandRngType = c_uint;
pub const curandRngType_t = enum_curandRngType;
pub const CURAND_ORDERING_PSEUDO_BEST: c_int = 100;
pub const CURAND_ORDERING_PSEUDO_DEFAULT: c_int = 101;
pub const CURAND_ORDERING_PSEUDO_SEEDED: c_int = 102;
pub const CURAND_ORDERING_PSEUDO_LEGACY: c_int = 103;
pub const CURAND_ORDERING_PSEUDO_DYNAMIC: c_int = 104;
pub const CURAND_ORDERING_QUASI_DEFAULT: c_int = 201;
pub const enum_curandOrdering = c_uint;
pub const curandOrdering_t = enum_curandOrdering;
pub const CURAND_DIRECTION_VECTORS_32_JOEKUO6: c_int = 101;
pub const CURAND_SCRAMBLED_DIRECTION_VECTORS_32_JOEKUO6: c_int = 102;
pub const CURAND_DIRECTION_VECTORS_64_JOEKUO6: c_int = 103;
pub const CURAND_SCRAMBLED_DIRECTION_VECTORS_64_JOEKUO6: c_int = 104;
pub const enum_curandDirectionVectorSet = c_uint;
pub const curandDirectionVectorSet_t = enum_curandDirectionVectorSet;
pub const curandDirectionVectors32_t = [32]c_uint;
pub const curandDirectionVectors64_t = [64]c_ulonglong;
pub const struct_curandGenerator_st = opaque {};
pub const curandGenerator_t = ?*struct_curandGenerator_st;
pub const curandDistribution_st = f64;
pub const curandDistribution_t = [*c]curandDistribution_st;
pub const struct_curandDistributionShift_st = opaque {};
pub const curandDistributionShift_t = ?*struct_curandDistributionShift_st;
pub const struct_curandDistributionM2Shift_st = opaque {};
pub const curandDistributionM2Shift_t = ?*struct_curandDistributionM2Shift_st;
pub const struct_curandHistogramM2_st = opaque {};
pub const curandHistogramM2_t = ?*struct_curandHistogramM2_st;
pub const curandHistogramM2K_st = c_uint;
pub const curandHistogramM2K_t = [*c]curandHistogramM2K_st;
pub const curandHistogramM2V_st = curandDistribution_st;
pub const curandHistogramM2V_t = [*c]curandHistogramM2V_st;
pub const struct_curandDiscreteDistribution_st = opaque {};
pub const curandDiscreteDistribution_t = ?*struct_curandDiscreteDistribution_st;
pub const CURAND_CHOOSE_BEST: c_int = 0;
pub const CURAND_ITR: c_int = 1;
pub const CURAND_KNUTH: c_int = 2;
pub const CURAND_HITR: c_int = 3;
pub const CURAND_M1: c_int = 4;
pub const CURAND_M2: c_int = 5;
pub const CURAND_BINARY_SEARCH: c_int = 6;
pub const CURAND_DISCRETE_GAUSS: c_int = 7;
pub const CURAND_REJECTION: c_int = 8;
pub const CURAND_DEVICE_API: c_int = 9;
pub const CURAND_FAST_REJECTION: c_int = 10;
pub const CURAND_3RD: c_int = 11;
pub const CURAND_DEFINITION: c_int = 12;
pub const CURAND_POISSON: c_int = 13;
pub const enum_curandMethod = c_uint;
pub const curandMethod_t = enum_curandMethod;
pub const MAJOR_VERSION: c_int = 0;
pub const MINOR_VERSION: c_int = 1;
pub const PATCH_LEVEL: c_int = 2;
pub const enum_libraryPropertyType_t = c_uint;
pub const libraryPropertyType = enum_libraryPropertyType_t;
pub const libraryPropertyType_t = enum_libraryPropertyType_t;
pub const struct_CUstream_st = opaque {};
pub const cudaStream_t = ?*struct_CUstream_st;
pub extern fn curandCreateGenerator(generator: [*c]curandGenerator_t, rng_type: curandRngType_t) curandStatus_t;
pub extern fn curandCreateGeneratorHost(generator: [*c]curandGenerator_t, rng_type: curandRngType_t) curandStatus_t;
pub extern fn curandDestroyGenerator(generator: curandGenerator_t) curandStatus_t;
pub extern fn curandGetVersion(version: [*c]c_int) curandStatus_t;
pub extern fn curandGetProperty(@"type": libraryPropertyType, value: [*c]c_int) curandStatus_t;
pub extern fn curandSetStream(generator: curandGenerator_t, stream: cudaStream_t) curandStatus_t;
pub extern fn curandSetPseudoRandomGeneratorSeed(generator: curandGenerator_t, seed: c_ulonglong) curandStatus_t;
pub extern fn curandSetGeneratorOffset(generator: curandGenerator_t, offset: c_ulonglong) curandStatus_t;
pub extern fn curandSetGeneratorOrdering(generator: curandGenerator_t, order: curandOrdering_t) curandStatus_t;
pub extern fn curandSetQuasiRandomGeneratorDimensions(generator: curandGenerator_t, num_dimensions: c_uint) curandStatus_t;
pub extern fn curandGenerate(generator: curandGenerator_t, outputPtr: [*c]c_uint, num: usize) curandStatus_t;
pub extern fn curandGenerateLongLong(generator: curandGenerator_t, outputPtr: [*c]c_ulonglong, num: usize) curandStatus_t;
pub extern fn curandGenerateUniform(generator: curandGenerator_t, outputPtr: [*c]f32, num: usize) curandStatus_t;
pub extern fn curandGenerateUniformDouble(generator: curandGenerator_t, outputPtr: [*c]f64, num: usize) curandStatus_t;
pub extern fn curandGenerateNormal(generator: curandGenerator_t, outputPtr: [*c]f32, n: usize, mean: f32, stddev: f32) curandStatus_t;
pub extern fn curandGenerateNormalDouble(generator: curandGenerator_t, outputPtr: [*c]f64, n: usize, mean: f64, stddev: f64) curandStatus_t;
pub extern fn curandGenerateLogNormal(generator: curandGenerator_t, outputPtr: [*c]f32, n: usize, mean: f32, stddev: f32) curandStatus_t;
pub extern fn curandGenerateLogNormalDouble(generator: curandGenerator_t, outputPtr: [*c]f64, n: usize, mean: f64, stddev: f64) curandStatus_t;
pub extern fn curandCreatePoissonDistribution(lambda: f64, discrete_distribution: [*c]curandDiscreteDistribution_t) curandStatus_t;
pub extern fn curandDestroyDistribution(discrete_distribution: curandDiscreteDistribution_t) curandStatus_t;
pub extern fn curandGeneratePoisson(generator: curandGenerator_t, outputPtr: [*c]c_uint, n: usize, lambda: f64) curandStatus_t;
pub extern fn curandGeneratePoissonMethod(generator: curandGenerator_t, outputPtr: [*c]c_uint, n: usize, lambda: f64, method: curandMethod_t) curandStatus_t;
pub extern fn curandGenerateBinomial(generator: curandGenerator_t, outputPtr: [*c]c_uint, num: usize, n: c_uint, p: f64) curandStatus_t;
pub extern fn curandGenerateBinomialMethod(generator: curandGenerator_t, outputPtr: [*c]c_uint, num: usize, n: c_uint, p: f64, method: curandMethod_t) curandStatus_t;
pub extern fn curandGenerateSeeds(generator: curandGenerator_t) curandStatus_t;
pub extern fn curandGetDirectionVectors32(vectors: [*c][*c]curandDirectionVectors32_t, set: curandDirectionVectorSet_t) curandStatus_t;
pub extern fn curandGetScrambleConstants32(constants: [*c][*c]c_uint) curandStatus_t;
pub extern fn curandGetDirectionVectors64(vectors: [*c][*c]curandDirectionVectors64_t, set: curandDirectionVectorSet_t) curandStatus_t;
pub extern fn curandGetScrambleConstants64(constants: [*c][*c]c_ulonglong) curandStatus_t;
pub const curandStatus = enum_curandStatus;
pub const curandRngType = enum_curandRngType;
pub const curandOrdering = enum_curandOrdering;
pub const curandDirectionVectorSet = enum_curandDirectionVectorSet;
pub const curandGenerator_st = struct_curandGenerator_st;
pub const curandDistributionShift_st = struct_curandDistributionShift_st;
pub const curandDistributionM2Shift_st = struct_curandDistributionM2Shift_st;
pub const curandHistogramM2_st = struct_curandHistogramM2_st;
pub const curandDiscreteDistribution_st = struct_curandDiscreteDistribution_st;
pub const curandMethod = enum_curandMethod;
